---
title: "Welcome to the Tidyverse"
author: "8/25/2023"
format: 
  revealjs:
    theme: serif
editor: visual
---

---
format:
  revealjs:
    scrollable: true
    highlight-style: atom-one
    code-block-bg: true 
  html:
    css: styles.css
---

## Outline and Objectives

::: {.fragment .fade-up}
-   What is a package and how to we *get* them?
:::

::: {.fragment .fade-up}
-   What is the tidyverse?
:::

::: {.fragment .fade-up}
-   Packages in the tidyverse
:::

::: {.fragment .fade-up}
-   The four most commonly used packages in tidyverse with some brief examples
:::

::: {.fragment .fade-up}
-   Live coding!
:::

## What are **packages**?

::: {.fragment .fade-up}
-   Built in functions like *mean()*, *max()*, *str()*...
:::

::: {.fragment .fade-up}
-   **BUT** there are many not built into Base R
:::

::: {.fragment .fade-up}
-   These functions are nestled within **packages** of which we can download
:::

## How to download a package

``` {.r code-line-numbers="1-2|4-5"}
install.packages("palmerpenguins") 
install.packages("tidyverse")

library(palmerpenguins)
library(tidyverse)
```

```{r}
library(tidyverse)
library(palmerpenguins)
```

## What is [Tidyverse](https://www.tidyverse.org/)?

::: columns
::: {.column width="60%"}
::: {.fragment .fade-up}
-   An *opinionated* collection of R packages
:::

::: {.fragment .fade-up}
-   ALL packages share an underlying **philosophy, grammar (low-level), and date structures**
:::

::: {.fragment .fade-up}
-   Meaning: Learning one means it is *easier* to learn the next
:::

::: {.fragment .fade-up}
-   Facilitates the conversation *between* human and computer on data science and manipulation challenges
:::
:::

::: {.column width="40%"}
![](tidyverse.png){width="300px"}
:::
:::

## Core Tidyverse

::: columns
::: {.column width="40%"}
-   `ggplot2`
-   `dplyr`
-   `tidyr`
-   `tibble`
-   `readr`
-   `purrr`
-   `stringr`
-   `forcats`
:::

::: {.column width="60%"}
![](tidyverse%20comb.png){width="500px"}
:::
:::

## But which *should* you know?

::: columns
::: {.column width="25%"}
::: {.fragment .fade-up}
-   `ggplot2` ![](ggplot.png){width="200px"}
:::
:::

::: {.column width="25%"}
::: {.fragment .fade-up}
-   `dplyr` ![](dplyr.png){width="200px"}
:::
:::
:::

::: {.column width="25%"}
::: {.fragment .fade-up}
-   `tidyr` ![](tidyr.png){width="200px"}
:::
:::

::: {.column width="25%"}
::: {.fragment .fade-up}
-   `tibble` ![](tibble.png){width="200px"}
:::
:::

## ggplot2 (Grammar of Graphics) ![](ggplot.png){width="80px"}

::: columns
::: {.column width="60%"}
::: {.fragment .fade-up}
-   System for *declaratively* creating graphics
:::

::: {.fragment .fade-up}
-   Provide data and tell ggplot how to map variables and aesthetics
:::

::: {.fragment .fade-up}
![](sent.prey.v3.2022.png){width="400px"}
:::
:::

::: {.column width="40%"}
::: {.fragment .fade-up}
![](glmer%20lycosidae.png){width="400px"}
:::

::: {.fragment .fade-up}
![](nmds%20all%20with%20stress.png){width="400px"}
:::
:::
:::

## dplyr (Data Frame - plier) ![](dplyr.png){width="80px" fit-align="right"}

::: incremental
-   Grammar of data manipulation

-   Providing a consistent set of **verbs**

-   `mutate()` adds new variables that are functions or existing variables

-   `select()` picks variables based on their names

-   `filter()` picks cases based on their values

-   `summarize()` reduces multiple values down to a single summary

-   `arrange()` changes the ordering of the rows
:::

## The pipe **%\>%** operator

::: {.fragment .fade-up}
-   Efficient means to make many changes to a df at once
:::

::: {.fragment .fade-up}
-   Water through system,the commands run top to bottom
:::

::: {.fragment .fade-up}
-   OR a conveyor belt of operations
:::

## Dplyr example

``` {.r code-line-numbers="1|2|3-6|7|9"}
new_penguins_df <- penguins %>%
  select(species, bill_length_mm, year) %>% 
  mutate( 
    sp_year = paste(species, "-", year),  
    rn_bill_length_mm = round(bill_length_mm) 
  ) %>% 
  select(species, year, sp_year, bill_length_mm, rn_bill_length_mm)
  
as_tibble(new_penguins_df)
```

## Dplyr example

```{r}
#| echo: true
new_penguins_df <- penguins %>%
  select(species, bill_length_mm, year) %>% 
  mutate( 
    sp_year = paste(species, "-", year),  
    rn_bill_length_mm = round(bill_length_mm) 
  ) %>% 
  select(species, year, sp_year, bill_length_mm, rn_bill_length_mm) 

as_tibble(new_penguins_df)
```

## tidyr (Tidy data)![](tidyr.png){width="80px"}

::: incremental
-   Used to create tidy data
-   Every column is a variable
-   Every row is an observation
-   Every cell is a single value
-   Tidy data is data ready for analysis
:::

## tibble ![](tibble.png){width="80px"}

::: incremental
-   Modern re-imagining of data.frame
-   Produces **more** errors to confront problems earlier
-   **Won't** change variable names or types (which data.frame did)
-   Superior for large data sets
:::

## tibble example

``` r
data <- data.frame(a = 1:3, b = letters[1:3], c = Sys.Date() - 1:3)
data
#>   a b          c
#> 1 1 a 2023-02-21
#> 2 2 b 2023-02-20
#> 3 3 c 2023-02-19

as_tibble(data)
#> # A tibble: 3 Ã— 3
#>       a b     c         
#>   <int> <chr> <date>    
#> 1     1 a     2023-02-21
#> 2     2 b     2023-02-20
#> 3     3 c     2023-02-19 
```

# Lettuce Code! Please open rstudio
